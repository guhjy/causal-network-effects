x = SSR(cii, verbose=T)
x = SSR(cii, verbose=T)
x
source("randomizations.R")
x = SSR(cii, verbose=T)
cii
source("randomizations.R")
source("cii.R")
cii <- small.world.cii()
x = SSR(cii, verbose=T)
cii
source("cii.R")
cii <- small.world.cii()
x = SSR(cii, verbose=T)
cii <- small.world.cii()
x = SSR(cii, verbose=T)
x
get.cii.units(cii)
source("cii.R")
cii <- small.world.cii()
x = SSR(cii, verbose=T)
cii
plot.cii(cii)
get.cii.Vk(cii)
x = get.cii.Vk(cii)
source("cii.R")
cii <- small.world.cii()
plot.cii(cii)
get.cii.Vk(cii)
is.shared.neighbor(cii, 6)
is.shared.neighbor(cii, 5)
is.shared.neighbor(cii, c(5,6))
is.shared.neighbor(cii, 12)
is.shared.neighbor(cii, 13)
source("cii.R")
cii <- small.world.cii()
plot.cii(cii)
cii <- small.world.cii()
plot.cii(cii)
get.cii.shared.neighbors(cii)
source("cii.R")
cii <- small.world.cii()
get.cii.shared.neighbors(cii)
plot.cii(cii)
get.cii.Vk(cii)
get.unit.neighbors(cii, 18)
is.shared.neighbor(cii, 18)
cii <- candy.cii(k=10)
plot.cii(cii)
get.cii.shared.neighbors(cii)
length()get.cii.shared.neighbors(cii)
length(get.cii.shared.neighbors(cii))
length(get.cii.shared.neighbors(candy.cii(12)))
length(get.cii.shared.neighbors(candy.cii(15)))
length(get.cii.shared.neighbors(candy.cii(20)))
source("cii.R")
cii <- small.world.cii()
plot.cii(cii)
cii <- candy.cii(10)
plot.cii(cii)
shared.neighbors = get.cii.shared.neighbors(cii)
control.shared = rep(0, length(shared.neighbors))
cii <- set.units.Z(cii, shared.neighbors, rep(0, control.shared))
shared.neighbors = get.cii.shared.neighbors(cii)
control.shared = rep(0, length(shared.neighbors))
cii <- set.units.Z(cii, shared.neighbors, control.shared)
plot.cii(cii)
SSR(cii, verbose=T)
source("randomizations.R")
cii <- candy.cii(10)
x = INR(cii)
x = INR(cii)
x = INR(cii)
source("randomizations.R")
x = INR(cii)
x = INR(cii)
cii <- candy.cii(6)
x = INR(cii)
plot.cii(c)
plot.cii(x)
library(igraph)
g = watts.strogatz.game(dim=1, size=50, nei=5, p=0.25)
args = list(G=g, Y=NULL, k=4)
cii <- init.args(cii)
cii <- init.cii(args)
plot.cii(cii)
x = SSR(cii)
plot.cii(x)
source("randomizations.R")
ssr.table()
source("randomizations.R")
ssr.table()
ssr.table()
ssr.table()
ssr.table()
source("randomizations.R")
ssr.table()
source("randomizations.R")
ssr.table()
source("randomizations.R")
ssr.table()
ssr.table()
source("randomizations.R")
ssr.table()
source("randomizations.R")
ssr.table()
source("randomizations.R")
ssr.table()
x = ssr.table()
x
plot.cii(x)
x = ssr.table()
plot.cii(x)
x
source("cii.R")
ssr.table()
x = ssr.table()
get.experiment.balance(x)
x
min(x$experiment$exposed, x$experiment$control)
source("cii.R")
x = ssr.table()
get.experiment.balance(x)
x = ssr.table()
get.experiment.balance(x)
x = ssr.table()
get.experiment.balance(x)
x = ssr.table()
get.experiment.balance(x)
source("randomizations.R")
x = ssr.table()
get.experiment.balance(x)
x = ssr.table(6)
get.experiment.balance(x)
x = ssr.table(6)
get.experiment.balance(x)
x = ssr.table(6)
get.experiment.balance(x)
x = ssr.table(6)
get.experiment.balance(x)
source("randomizations.R")
res =ssr.table()
warnings()
res =ssr.table()
source("randomizations.R")
res =ssr.table()
get.experiment.balance(example.ssr(10))
source("randomizations.R")
get.experiment.balance(example.ssr(10))
source("randomizations.R")
get.experiment.balance(example.ssr(10))
example.ssr(5)
get.experiment.balance(example.ssr(10))
example.ssr(5)
x = example.ssr(5)
example.ssr(5)
x = example.ssr(5)
x
get.experiment.balance(example.ssr(5))
get.experiment.balance(example.ssr(5))
get.experiment.balance(example.ssr(5))
get.experiment.balance(example.ssr(5))
get.experiment.balance(example.ssr(5))
ssr.table()
source("randomizations.R")
ssr.table()
get.experiment.balance(example.ssr(5))
replicate(10, function(i) get.experiment.balance(example.str(5)))
replicate(10, get.experiment.balance(example.str(5)))
source("randomizations.R")
ssr.table()
source("randomizations.R")
ssr.table()
source("randomizations.R")
get.experiment.balance(example.ssr(5))
get.experiment.balance(example.ssr(4))
source("randomizations.R")
get.experiment.balance(example.ssr(4))
ssr.table()
res = ssr.table()
names(res)
res
as.data.frame(res)
source("randomizations.R")
res = ssr.table(trials=5)
res
source("randomizations.R")
res = ssr.table(trials=5)
source("randomizations.R")
res = ssr.table(trials=5)
source("randomizations.R")
res = ssr.table(trials=5)
source("randomizations.R")
res = ssr.table(trials=5)
source("randomizations.R")
res = ssr.table(trials=5)
source("randomizations.R")
res = ssr.table(trials=5)
res
source("randomizations.R")
res = ssr.table(trials=5)
source("randomizations.R")
res = ssr.table(trials=5)
source("randomizations.R")
res = ssr.table(trials=5)
source("randomizations.R")
res = ssr.table(trials=5)
res
res = ssr.table(trials=30)
res
source("randomizations.R")
res = ssr.table(trials=5)
source("randomizations.R")
res = ssr.table(trials=5)
source("randomizations.R")
res = ssr.table(trials=5)
res
source("randomizations.R")
res
source("randomizations.R")
source("randomizations.R")
res = ssr.table(trials=30)
res
source("randomizations.R")
ssr.table(c(6), trials=5)
ssr.table(3:6, trials=40)
load("G.Rdata")
G
args = list(G=G, Y=NULL, k=3)
cii <- init.cii(args)
get.experiment.balance(INR(cii))
get.experiment.balance(INR(cii))
get.experiment.balance(INR(cii))
get.experiment.balance(INR(cii))
get.experiment.balance(INR(cii))
get.experiment.balance(INR(cii))
get.experiment.balance(INR(cii))
plot.cii(cii)
get.cii.shared.neighbors(cii)
G = watts.strogatz.game(dim=1, size=35, nei=2, p=0.05)
args = list(G=G, Y=NULL, k=3)
cii <- init.cii(args)
plot.cii(cii)
G = watts.strogatz.game(dim=1, size=35, nei=2, p=0.2)
args = list(G=G, Y=NULL, k=3)
cii <- init.cii(args)
plot.cii(cii)
get.cii.shared.neighbors(cii)
get.cii.Vk(cii)
args = list(G=G, Y=NULL, k=4)
cii <- init.cii(args)
get.cii.shared.neighbors(cii)
args = list(G=G, Y=NULL, k=5)
cii <- init.cii(args)
get.cii.shared.neighbors(cii)
INR(cii)
x = INR(cii)
plot.cii(X)
plot.cii(x)
x = INR(cii)
plot.cii(x)
x = INR(cii)
plot.cii(x)
x = INR(cii)
plot.cii(x)
args = list(G=G, Y=NULL, k=6)
cii <- init.cii(args)
plot.cii(x)
x = INR(cii)
plot.cii(x)
x = INR(cii)
plot.cii(x)
cii
plot.cii(x)
x = INR(cii)
plot.cii(x)
plot.cii(cii)
x = INR(cii)
plot.cii(cii)
plot.cii(x)
x = cii.expose.unit(cii, 6)
plot.cii(x)
x = cii.control.unit(cii, 16)
plot.cii(x)
x = cii.expose.unit(cii, 6)
x = cii.control.unit(c, 16)
x = cii.control.unit(x, 16)
x
x = cii.expose.unit(cii, 6)
plot.cii(x)
x = cii.control.unit(x, 16)
x = cii
plot.cii(x)
shared.neighbors = get.cii.shared.neighbors(cii)
control.shared = rep(0, length(shared.neighbors))
cii <- set.units.Z(cii, shared.neighbors, control.shared)
cii <- SSR(cii, verbose=verbose)
shared.neighbors = get.cii.shared.neighbors(cii)
control.shared = rep(0, length(shared.neighbors))
cii <- set.units.Z(cii, shared.neighbors, control.shared)
plot.cii(cii)
cii = x
shared.neighbors = get.cii.shared.neighbors(cii)
control.shared = rep(0, length(shared.neighbors))
cii <- set.units.Z(cii, shared.neighbors, control.shared)
plot.cii(cii)
cii
get.cii.Vk(cii)
get.cii.shared.neighbors(cii)
cii <- cii.expose.unit(cii, 6)
?barabasi.game
g <- barabasi.game(100)
degree.distribution(g)
hist(degree(g))
degree(g)
g <- barabasi.game(100, power=2)
degree(g)
g <- barabasi.game(100, power=1.1)
degree(g)
g <- barabasi.game(100, power=0.95)
degree(g)
g <- barabasi.game(50, power=0.95)
degree(g)
g <- barabasi.game(50, power=0.8)
degree(g)
g <- barabasi.game(50, power=0.7)
degree(g)
source("randomizations.R")
ssr.table(c(5), trials=10)
ssr.table(c(4), trials=10)
ssr.table(c(3), trials=10)
source("randomizations.R")
ssr.table(n=100, c(3), trials=10)
ssr.table(n=100, c(4), trials=10)
source("randomizations.R")
ssr.table(n=100, c(3), trials=10)
ssr.table(n=50, c(3), trials=10)
?barabasi.game
ssr.table(n=50, c(2), trials=10)
source("randomizations.R")
ssr.table(n=50, c(2), trials=10)
source("randomizations.R")
ssr.table(n=50, power=0.4, c(2), trials=10)
ssr.table(n=50, power=0.3, c(2), trials=10)
ssr.table(n=50, power=0.8, c(2), trials=10)
ssr.table(n=70, power=0.75, c(2), trials=10)
ssr.table(n=70, power=0.65, c(2), trials=10)
load("cii.R")
load("cii.Rdata")
cii$k
plot.cii(cii)
source("randomizations.R")
ssr.table(n=70, power=0.65, c(2), trials=10)
ssr.table(n=50, power=0.8, c(2), trials=10)
load("cii.Rdata")
cii
plot.cii(cii)
get.cii.shared.neighbors(cii)
INR(cii)
replicate(10, { get.experiment.balance(INR(cii))})
y = replicate(10, { get.experiment.balance(INR(cii))})
mean(y)
sd(y)
y
source("randomizations.R")
source("randomizations.R")
cii
plot.cii(cii)
x = INR(cii)
x = cii
shared.neighbors = get.cii.shared.neighbors(cii)
control.shared = rep(0, length(shared.neighbors))
cii <- set.units.Z(cii, shared.neighbors, control.shared)
# cii <- SSR(cii, verbose=verbose)
cs = which.can.control(cii)
ts = which.can.expose(cii)
joint <- intersect(cs, ts)
plot.cii(cii)
ci
cs
ts
joint
cs.remainder = setdiff(cs, joint)
ts.remainder = setdiff(ts, joint)
cs.remainder
ts.remainder
for (unit in ts.remainder)
cii <- cii.expose.unit(cii, unit)
for(unit in cs.remainder)
cii <- cii.control.unit(cii, unit)
plot.cii(cii)
joint
cii
joint
cii <- c
cii <- x
plot.cii(cii)
get.cii.shared.neighbors(cii)
cii$k
shared.neighbors = get.cii.shared.neighbors(cii)
control.shared = rep(0, length(shared.neighbors))
cii <- set.units.Z(cii, shared.neighbors, control.shared)
plot.cii(cii)
cii
cs = which.can.control(cii)
ts = which.can.expose(cii)
joint <- intersect(cs, ts)
cs.remainder = setdiff(cs, joint)
ts.remainder = setdiff(ts, joint)
cs
ts
ts.remainder
ts
joint
cs.remainder
get.unit.neighbors(cii, 2)
get.unit.neighbors(cii, 5)
ts
cs.remainder
cii <- cii.control.unit(cii, 2)
plot.cii(cii)
cii
cs.remainder
cii <- cii.control.unit(cii, 13)
plot.cii(cii)
cii
cs.remainder
cii <- cii.control.unit(cii, 16)
plot.cii(cii)
cii
get.cii.shared.neighbors(x)
source("randomizations.R")
source("randomizations.R")
source("randomizations.R")
res = prez.table(n=50, power=0.8, c(2,3), trials=2)
source("randomizations.R")
res = prez.table(n=50, power=0.8, c(2,3), trials=2)
res
res = prez.table(n=50, power=0.8, c(2,3,4), trials=2)
res = prez.table(n=50, power=0.8, c(2,3,4), trials= 40)
res
res = prez.table(n=70, power=0.8, c(2,3,4), trials= 30)
res
se$ssr
res$ssr
res$ssr$mean
res$ssr$se
res = prez.table(n=70, power=0.7, c(2,3,4), trials= 20)
res$ssr$mean
res$ssr$se
res$rand$mean
res$rand$se
res$inr$mean
res$inr$se
load("cii.Rdata")
plot.cii(cii)
cii$k
cii$k=2
length(get.cii.Vk(cii))
INR(cii)
get.experiment.balance(INR(cii))
get.experiment.balance(INR(cii))
get.experiment.balance(INR(cii))
res
res$inr
cii
plot.cii(cii)
get.experiment.balance(INR(cii))
get.experiment.balance(INR(cii))
get.experiment.balance(INR(cii))
get.experiment.balance(INR(cii))
x = cii
shared.neighbors = get.cii.shared.neighbors(cii)
control.shared = rep(0, length(shared.neighbors))
cii <- set.units.Z(cii, shared.neighbors, control.shared)
plot.cii(cii)
cii
sample(c(), 1)
source("randomizations.R")
x
plot.cii(x)
cii <- x
get.experiment.balance(INR(cii))
source("randomizations.R")
get.experiment.balance(INR(cii))
source("randomizations.R")
get.experiment.balance(INR(cii))
source("randomizations.R")
get.experiment.balance(INR(cii))
get.experiment.balance(INR(cii))
get.experiment.balance(INR(cii))
get.experiment.balance(INR(cii))
get.experiment.balance(INR(cii))
get.experiment.balance(INR(cii))
get.experiment.balance(INR(cii))
get.experiment.balance(INR(cii))
get.experiment.balance(INR(cii))
get.experiment.balance(INR(cii))
get.experiment.balance(INR(cii))
cii$k = 3
get.experiment.balance(INR(cii))
get.experiment.balance(INR(cii))
get.experiment.balance(INR(cii))
get.experiment.balance(INR(cii))
source("randomizations.R")
res = prez.table(n=90, power=0.7, k.array=c(2,3,4), trials=30)
res$ssr$mean
res$ssr$se
res$rand$mean
res$rand$se
res$inr$mean
res$inr$se
